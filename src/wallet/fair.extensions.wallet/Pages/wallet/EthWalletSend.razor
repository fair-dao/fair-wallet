@* 发送*@
@page "/wallet/ethersend/{Id}"
@using TronNet
@using fair.extensions.wallet.entity.tron
@using fair.extensions.wallet.services.wallet
@using System.Security.Cryptography;
@using System.Text;
@using fair.extensions.wallet.entity.tron;
@layout fair.extensions.shared.coms.SinglePage
@inherits PageBase

<UQRScaner FoundCode="QRFoundCode" @bind-Scanning="@scanning"></UQRScaner>
<UPage ContentPadding>
    <TitlePanel>
        @Localer["发送代币"]
    </TitlePanel>
    <ContentPanel>
        @if (coinSender != null)
        {

            if (transactionData == null)
            {

                <UNotification Color="Color.Warning">该操作将把私钥解密到内存中（花费时间1毫秒以内），您可以断开网络，关闭其它程后，再确认签名</UNotification>
                <UForm SubmitButtonText="@Localer["确认签名"]" OnSubmit="()=>ToSignTransaction()">
                    <UFormInput @bind-Value="@coinSender.PubKey" Label="发送方" Vail="^0x[a-zA-Z0-9]{20,64}$" readonly></UFormInput>

                    <UFormInput @bind-Value="@coinGeter" Label="接收方" RightIcon="scan-code" Vail="^0x[a-zA-Z0-9]{20,64}$" ErrMsg="@Localer["以0x开头的地址"]" Required RightClick='(a,b)=>{ Console.WriteLine("rightIcon Click");scanning=true;this.InvokeAsync(()=>StateHasChanged());}'></UFormInput>
                     <UFormSelect @bind-SelectValue="@coinType" Label="代币类型">
                         @foreach (var asset in coinSender.Asets)
                        {
                            <option value="@asset.Name">@asset.Name （余额: @(asset.Balance)）</option>
                        }
                    </UFormSelect>
                    <UFormInput @bind-Value="@amount" Label="发送金额" Vail="^[\d\.]+?$" Required></UFormInput>
                     <UFormInput @bind-Value="@signPassword" Label="签名密码" Vail="^[\S]{8,64}$" ErrMsg="@Localer["不少于8个字符"]" Required></UFormInput>
                 </UForm>

            }
            else
            {
                <div>交易已签名，请开启网络，广播当前交易</div>
                <br />
                <UButton IsLarge
                        IsFullwidth @onclick="()=>BoastTransaction()">
                    @Localer["广播交易"]
                </UButton>
            }
        }
    </ContentPanel>
</UPage>
@code {




    bool scanning { get; set; }

    /// <summary>
    /// 代币类型
    /// </summary>
    string coinType { get; set; }


    BaseCoin coinSender { get; set; }


    /// <summary>
    /// 接收者
    /// </summary>
    string coinGeter { get; set; }

    /// <summary>
    /// 发送金额
    /// </summary>
    string amount { get; set; } = "0";

    string signPassword { get; set; }

    TransactionData transactionData;

    WalletProcesser walletProcesser;

    void QRFoundCode(object obj, string code)
    {
        scanning = false;
        coinGeter = code;
        this.InvokeAsync(() => StateHasChanged());
    }


    async void ToSignTransaction()
    {

        string seedPriKey = walletService.GetSeedPriKey(signPassword, coinSender.Seed);
        transactionData = await walletProcesser.CreateTransaction(coinSender.PubKey, coinGeter, decimal.Parse(amount));
        await walletProcesser.SignTransaction(transactionData, seedPriKey);

        await this.InvokeAsync(() => StateHasChanged());
    }

    async void BoastTransaction()
    {


        await walletProcesser.BoastTransaction(transactionData);


        Alert("发送", $"{coinSender.PubKey} 发送 {amount} 给 {coinGeter} 已广播");


    }

    Chain _Chain;

    [Parameter]
    public string Id { get; set; }

    protected override Task OnInitializedAsync()
    {
        Task.Run((Func<Task>)(async () =>
    {
        Guid id = Guid.Parse(Id);
        var user = await walletService.GetLocalUserAsync();
        entity.BaseCoin coin = user.UserCoin.Coins.FirstOrDefault(m => m.Id == id);
        _Chain = Chain.CoinNets.FirstOrDefault(m => m.Id == coin.ChainId);
        walletProcesser = WalletProcesser.GetProcesser(_Chain);
        if (coin.Asets?.Count > 0)
        {
            coinType = coin.Asets[(int)0].Name;
        }
        else
        {
            coin.Asets = new List<CoinAset>();
        }
        if (coin != null) coinSender = coin;

        Console.WriteLine($"coin:{coinSender?.PubKey},{coinSender?.Id}");
        await this.InvokeAsync(() => this.StateHasChanged());

    }));

        return base.OnInitializedAsync();
    }
}
